* msqlite
It's a C++20 SQLite3 wrapper which has as its main goal an expressive code that [[#how-fast][runs fast]].

#+BEGIN_SRC C++
sql::open("dev.db")
| sql::query("select name, salary from person")
| sql::for_each([](std::string_view name, float salary)
  { std::cout << name << "," << salary << std::endl; })
| sql::onerror([](auto e){ std::cout << e << std::endl; });
#+END_SRC
This code uses ~result<T>~ instead of C++ exceptions and the pipe operator(~|~) is used to chain the operations. The usage of pipes are optional and there is an API that throws exceptions:
#+BEGIN_SRC C++
namespace sql = msqlite::throws;
try {
    auto conn = sql::open("dev.db");
    auto stmt = sql::query(conn, "select name, salary from person");
    sql::for_each(stmt, [](std::string_view name, float salary)
    { std::cout << name << "," << salary << std::endl; });
} catch(const std::system_error& e)
{ std::cout << e.code() << std::endl; }
#+END_SRC

* How fast?
:PROPERTIES:
:CUSTOM_ID: how-fast
:END:
There are some benchmarks at ~benchmark/~ for each operation supported. The library is compared to solutions using the C sqlite3 library. I think that is not a fair comparison in a sense of look what we have versus what we pay for it, of course that we have more using msqlite versus sqlite3, but this "unfair" comparison is useful to known how fast is a solution using msqlite.


The benchmark ~benchmark/for_each.cpp~ that measures the efficiency in time to execute ~for_each(stmt, f)~ reports the following in my machine[1] using 20 repetitions:

| solution   | mean    | stddev | (msqlite - [solution]) / abs([solution]) |
|------------+---------+--------+------------------------------------------|
| msqlite    | 8496ns  | 29ns   |                                        0 |
| sqlite3    | 8398ns  | 53ns   |                                  -0.0116 |
| sqlite_orm | 85496ns | 148ns  |                                  +9.1805 |

[1] AMD Ryzen 7 1700X Eight-Core Processor
Run on (16 X 3900 MHz CPU s)
CPU Caches:
  L1 Data 32 KiB (x8)
  L1 Instruction 64 KiB (x8)
  L2 Unified 512 KiB (x8)
  L3 Unified 8192 KiB (x2)

* Supported compilers
+ GCC 10.1

* Dependencies
+ [[https://github.com/TartanLlama/expected][tl::expected]]
+ [[https://www.sqlite.org][libsqlite3]]

* ToDo
1. Take a look at Boost.Outcome to replace my ~result<T>~ and ~tl::expected<T, E>~.
2. Support to use pipe operators with C++ exceptions.
 

